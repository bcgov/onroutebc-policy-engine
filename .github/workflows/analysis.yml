name: Analysis

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review, converted_to_draft]
  schedule:
    - cron: "0 11 * * 0" # 3 AM PST = 12 PM UDT, runs sundays
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  conventional-commit-check:
    name: conventional-commit-check
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest  # Runs on the latest version of Ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checks out the code for the current pull request
        with:
          fetch-depth: 0

      - name: Check commit messages
        run: |
          set -eux
          #git fetch origin ${{ needs.vars.outputs.commit_ref }}
          git log origin/${{ github.event.pull_request.base.ref }}..HEAD --pretty=format:%s | grep -qE "^(feat|fix|chore|docs|style|refactor|perf|test|build|ci|revert|WIP|BREAKING CHANGE): " || {
            echo "Aborting: Commit message does not follow conventional commits format.";
            echo "Message: $(git log origin/${{ github.event.pull_request.base.ref }}..HEAD --pretty=format:%s)";
            exit 1
          }
  lint:
    name: lint
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-latest  # Runs on the latest version of Ubuntu
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checks out the code from the repository

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install  # Installs project dependencies

      - name: Lint code
        run: npx eslint . --config .eslintrc.cjs  # Run ESLint with the specified config
      
  tests:
    name: Tests
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checks out the code from the repository

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install  # Installs project dependencies
      
      - name: Build Package
        run:  npm ci
      
      - name: Run tests
        run: npm test # Step 4: Run tests using the specified Node.js version.

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy:
    name: Trivy Security Scan
    if: ${{ ! github.event.pull_request.draft }}
    runs-on: ubuntu-22.04
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.24.0
        with:
          format: "sarif"
          output: "trivy-results.sarif"
          ignore-unfixed: true
          scan-type: "fs"
          scanners: "vuln,secret,config"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  results:
    name: Analysis Results
    needs: [conventional-commit-check, lint ,tests, trivy]
    if: always()
    runs-on: ubuntu-22.04
    steps:
      - if: contains(needs.*.result, 'failure')
        run: echo "At least one job has failed." && exit 1
      - run: echo "Success!"
